import React, { useEffect, useState, useMemo } from 'react';
import classes from './NewsPage.module.css';
import CenterBlock from '../../Standart/CenterBlock/CenterBlock';
import WidthBlock from '../../Standart/WidthBlock/WidthBlock';
import { useNavigate } from 'react-router-dom';
import serverConfig from '../../../serverConfig';
import uploadsConfig from '../../../uploadsConfig';

function NewsPage() {
  const navigate = useNavigate();

  const [news, setNews] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [searchTerm, setSearchTerm] = useState('');
  const [searchDate, setSearchDate] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await fetch(`${serverConfig}/news`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);

        const newsData = await response.json();
        setNews(newsData);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // ‚úÖ –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (300ms)
  const debounceSearch = useMemo(() => {
    let timeout;
    return (value) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        setSearchTerm(value);
      }, 300);
    };
  }, []);

  // üîç –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ
  const filteredNews = news.filter((el) => {
    const matchesTitle = el.title.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesDate = searchDate
      ? new Date(el.date).toLocaleDateString('ru-RU') === searchDate
      : true;

    return matchesTitle && matchesDate;
  });

  const transliterate = (text) => {
    const map = {
      –ê: 'A', –ë: 'B', –í: 'V', –ì: 'G', –î: 'D', –ï: 'E', –Å: 'E', –ñ: 'Zh', –ó: 'Z', –ò: 'I',
      –ô: 'Y', –ö: 'K', –õ: 'L', –ú: 'M', –ù: 'N', –û: 'O', –ü: 'P', –†: 'R', –°: 'S', –¢: 'T',
      –£: 'U', –§: 'F', –•: 'Kh', –¶: 'Ts', –ß: 'Ch', –®: 'Sh', –©: 'Shch', –´: 'Y', –≠: 'E',
      –Æ: 'Yu', –Ø: 'Ya', –∞: 'a', –±: 'b', –≤: 'v', –≥: 'g', –¥: 'd', –µ: 'e', —ë: 'e', –∂: 'zh',
      –∑: 'z', –∏: 'i', –π: 'y', –∫: 'k', –ª: 'l', –º: 'm', –Ω: 'n', –æ: 'o', –ø: 'p', —Ä: 'r',
      —Å: 's', —Ç: 't', —É: 'u', —Ñ: 'f', —Ö: 'kh', —Ü: 'ts', —á: 'ch', —à: 'sh', —â: 'shch',
      —ã: 'y', —ç: 'e', —é: 'yu', —è: 'ya', ' ': '-',
    };
    return text.split('').map((char) => map[char] || char).join('');
  };

  return (
    <CenterBlock>
      <WidthBlock>
        <div className={classes.search}>
          {/* üîç –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é */}
          <input
            type="text"
            placeholder="–ò—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"
            onChange={(e) => debounceSearch(e.target.value)}
          />
          {/* üìÖ –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ
          <input
            type="date"
            onChange={(e) => setSearchDate(e.target.value)}
          /> */}
        </div>

        {/* üïì –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
        {error && <p style={{ color: 'red' }}>{error}</p>}

        {/* –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç */}
        {!loading && filteredNews.length === 0 && <p>–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.</p>}

        <div className={classes.container}>
          {filteredNews.map((el) => (
            <div className={classes.containerCard} key={el.id}>
              <div className={classes.containerCardImg}>
                <img src={`${uploadsConfig}${el.img[0]}`} alt={el.title} />
              </div>
              <div className={classes.containerCardCenter}>
                <img src="/images/newsRec.png" alt="Decoration" />
                <span>{el.title}</span>
              </div>
              <div className={classes.containerCardBottom}>
                <span>{new Date(el.date).toLocaleDateString('ru-RU')}</span>

                <span
                  className={classes.readMore}
                  onClick={() =>
                    navigate(
                      `/news/${encodeURIComponent(
                        transliterate(el.title.replaceAll('¬´', '').replaceAll('¬ª', ''))
                      )}`
                    )
                  }
                >
                  –ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ {'>>'}
                </span>
              </div>
            </div>
          ))}
        </div>
      </WidthBlock>
    </CenterBlock>
  );
}

export default NewsPage;
