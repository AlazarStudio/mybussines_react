import React, { useEffect, useRef, useState } from 'react';
import classes from './ServicePage.module.css';
import { useLocation, useNavigate } from 'react-router-dom';
import CenterBlock from '../../Standart/CenterBlock/CenterBlock';
import WidthBlock from '../../Standart/WidthBlock/WidthBlock';
import serverConfig from '../../../serverConfig';
import uploadsConfig from '../../../uploadsConfig';

const ITEMS_PER_PAGE = 12;

export function slugify(title) {
  const map = {
    –ê: 'A',
    –ë: 'B',
    –í: 'V',
    –ì: 'G',
    –î: 'D',
    –ï: 'E',
    –Å: 'E',
    –ñ: 'Zh',
    –ó: 'Z',
    –ò: 'I',
    –ô: 'Y',
    –ö: 'K',
    –õ: 'L',
    –ú: 'M',
    –ù: 'N',
    –û: 'O',
    –ü: 'P',
    –†: 'R',
    –°: 'S',
    –¢: 'T',
    –£: 'U',
    –§: 'F',
    –•: 'Kh',
    –¶: 'Ts',
    –ß: 'Ch',
    –®: 'Sh',
    –©: 'Shch',
    –™: '',
    –´: 'Y',
    –¨: '',
    –≠: 'E',
    –Æ: 'Yu',
    –Ø: 'Ya',
    –∞: 'a',
    –±: 'b',
    –≤: 'v',
    –≥: 'g',
    –¥: 'd',
    –µ: 'e',
    —ë: 'e',
    –∂: 'zh',
    –∑: 'z',
    –∏: 'i',
    –π: 'y',
    –∫: 'k',
    –ª: 'l',
    –º: 'm',
    –Ω: 'n',
    –æ: 'o',
    –ø: 'p',
    —Ä: 'r',
    —Å: 's',
    —Ç: 't',
    —É: 'u',
    —Ñ: 'f',
    —Ö: 'kh',
    —Ü: 'ts',
    —á: 'ch',
    —à: 'sh',
    —â: 'shch',
    —ä: '',
    —ã: 'y',
    —å: '',
    —ç: 'e',
    —é: 'yu',
    —è: 'ya',
    ' ': '-',
    ',': '',
    '%': '', // <- —É–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ slug
  };

  return title
    .replaceAll('¬´', '')
    .replaceAll('¬ª', '')
    .replace(/\s+/g, ' ')
    .trim()
    .split('')
    .map((char) => map[char] || char)
    .join('');
}

function ServicePage({ children, ...props }) {
  const navigate = useNavigate();

  const location = useLocation();

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, [location.pathname]); // —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞

  const [service, setService] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState(''); // üîç –í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState(''); // üîÑ –î–µ–±–∞—É–Ω—Å —Å—Ç—Ä–æ–∫–∞
  const [hovered, setHovered] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è hover
  const [currentPage, setCurrentPage] = useState(1);
  const cardsRef = useRef(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await fetch(`${serverConfig}/services`);
        const servicesData = await response.json();
        setService(servicesData);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // ‚è≥ –î–µ–±–∞—É–Ω—Å-—Ñ—É–Ω–∫—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ—Ç `debouncedSearchQuery` —á–µ—Ä–µ–∑ 500 –º—Å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery);
      setCurrentPage(1);
    }, 500); // ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 500 –º—Å

    return () => clearTimeout(handler); // üöÄ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –≤–≤–æ–¥–µ
  }, [searchQuery]);

  // üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ `debouncedSearchQuery`
  const filteredServices = service.filter((el) =>
    el.title.toLowerCase().includes(debouncedSearchQuery.toLowerCase())
  );

  const totalPages = Math.ceil(filteredServices.length / ITEMS_PER_PAGE);
  const paginatedNews = filteredServices.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  useEffect(() => {
    if (cardsRef.current) {
      cardsRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [currentPage]);

  function getPaginationRange(current, total) {
    const delta = 2;
    const range = [];
    const rangeWithDots = [];
    let l;

    for (let i = 1; i <= total; i++) {
      if (
        i === 1 ||
        i === total ||
        (i >= current - delta && i <= current + delta)
      ) {
        range.push(i);
      }
    }

    for (let i of range) {
      if (l) {
        if (i - l === 2) {
          rangeWithDots.push(l + 1);
        } else if (i - l > 2) {
          rangeWithDots.push('...');
        }
      }
      rangeWithDots.push(i);
      l = i;
    }

    return rangeWithDots;
  }

  return (
    <>
      <CenterBlock>
        <WidthBlock>
          <div ref={cardsRef} className={classes.input}>
            {/* üîç –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –¥–µ–±–∞—É–Ω—Å–æ–º */}
            <input
              type="text"
              placeholder="–ù–∞–π—Ç–∏..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className={classes.searchInput} // –ú–æ–∂–Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å
            />
            {filteredServices.length > 0 && (
              <span className={classes.searchCount}>
                –ù–∞–π–¥–µ–Ω–æ: {filteredServices.length}
              </span>
            )}
            {filteredServices.length === 0 && (
              <span className={classes.searchCount}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</span>
            )}
          </div>
          <div  className={classes.container}>
            {filteredServices.length > 0 ? (
              <>
                {paginatedNews.map((el) => (
                  <div
                    className={classes.containerCard}
                    onMouseEnter={() => setHovered(el.id)}
                    onMouseLeave={() => setHovered(null)}
                    key={el.id}
                  >
                    <img
                      src={`${uploadsConfig}${el.img[0]}`}
                      className={classes.containerCardImg}
                      alt={el.title}
                    />
                    <img src="/images/roket.png" alt="–†–∞–∫–µ—Ç–∞" />
                    <img src="/images/orangeSer.png" alt="–û—Ä–∞–Ω–∂–µ–≤—ã–π —Å–µ—Ä–≤–∏—Å" />
                    <div className={classes.containerCardBottom}>
                      <span>{el.title}</span>
                      <span
                        className={classes.readMore}
                        onClick={() =>
                          navigate(
                            `/service/${encodeURIComponent(slugify(el.title))}`
                          )
                        }
                      >
                        <img
                          src={
                            hovered === el.id
                              ? '/images/Group16.svg'
                              : '/images/Group 15.svg'
                          }
                          alt="–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
                        />
                      </span>
                    </div>
                  </div>
                ))}

                {/* ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç map */}
                {totalPages > 1 && (
                  <div className={classes.pagination}>
                    <button
                      className={classes.pageButton}
                      onClick={() =>
                        setCurrentPage((prev) => Math.max(1, prev - 1))
                      }
                      disabled={currentPage === 1}
                    >
                      &lt;
                    </button>
                    {getPaginationRange(currentPage, totalPages).map(
                      (page, index) =>
                        page === '...' ? (
                          <span
                            key={`ellipsis-${index}`}
                            className={classes.ellipsis}
                          >
                            ...
                          </span>
                        ) : (
                          <button
                            key={`page-${page}`}
                            className={`${classes.pageButton} ${
                              currentPage === page ? classes.active : ''
                            }`}
                            onClick={() => setCurrentPage(page)}
                            disabled={currentPage === page}
                          >
                            {page}
                          </button>
                        )
                    )}
                    <button
                      className={classes.pageButton}
                      onClick={() =>
                        setCurrentPage((prev) => Math.min(totalPages, prev + 1))
                      }
                      disabled={currentPage === totalPages}
                    >
                      &gt;
                    </button>
                  </div>
                )}
              </>
            ) : (
              <p className={classes.noResults}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
            )}
          </div>
        </WidthBlock>
      </CenterBlock>
    </>
  );
}

export default ServicePage;
